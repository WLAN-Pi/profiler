# -*- coding: utf-8 -*-

import multiprocessing as mp

import pytest
from profiler import fakeap


class TestFakeAP:
    @pytest.mark.parametrize(
        "seq,expected",
        [(mp.Value("i", 1), 2), (mp.Value("i", 1969), 1970), (mp.Value("i", 4096), 1)],
    )
    def test_next_sequence_number(self, seq, expected):
        assert fakeap._Utils.next_sequence_number(seq) == expected

    def test_build_fake_frame_ies(self):
        conf = {
            "GENERAL": {
                "ssid": "WLAN Pi",
                "channel": 36,
                "frequency": 5120,
                "interface": "wlan1",
                "files_path": "/var/www/html/profiler",
            }
        }
        frame = fakeap._Utils.build_fake_frame_ies(conf, "42:95:a7:fa:50:22", testing=True)
        frame_bytes = bytes(frame)
        # 2.0.1
        old = b"\x00\x07WLAN Pi\x01\x08\x8c\x12\x98$\xb0H`l\x03\x01$\x05\x06\x05\x04\x00\x03\x00\x00-\x1a\xef\x19\x1b\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x18\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x02\x00\x00\x0f\xac\x02\x00\x0f\xac\x04\x8c\x00=\x16$\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x006\x03E\xc2\x00F\x05\x02\x00\x00\x00\x00\x7f\x08\x00\x00\x08\x00\x00\x00\x00@\xbf\x0c2\x00\x80\x03\xaa\xff\x00\x00\xaa\xff\x00\x00\xc0\x05\x00$\x00\x00\x00\xff##\t\x01\x00\x02@\x00\x04p\x0c\x80\x02\x03\x80\x04\x00\x00\x00\xaa\xff\xaa\xff{\x1c\xc7q\x1c\xc7q\x1c\xc7q\x1c\xc7q\xff\x07$\xf4?\x00\x19\xfc\xff\xdd\x18\x00P\xf2\x02\x01\x01\x8a\x00\x03\xa4\x00\x00'\xa4\x00\x00BC^\x00b2/\x00"
        # 4ss HT, 8ss HE, HE beamforming, etc
        known = b"\x00\x07WLAN Pi\x01\x08\x8c\x12\x98$\xb0H`l\x03\x01$\x05\x06\x05\x04\x00\x03\x00\x00-\x1a\xef\x19\x1b\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x18\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x02\x00\x00\x0f\xac\x02\x00\x0f\xac\x04\x8c\x00=\x16$\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x006\x03E\xc2\x00F\x05\x02\x00\x00\x00\x00\x7f\x08\x00\x00\x08\x00\x00\x00\x00@\xbf\x0c2\x00\x80\x03\xaa\xff\x00\x00\xaa\xff\x00\x00\xc0\x05\x00$\x00\x00\x00\xff##\r\x01\x00\x02@\x00\x04p\x0c\x89\x7f\x03\x80\x04\x00\x00\x00\xaa\xaa\xaa\xaa{\x1c\xc7q\x1c\xc7q\x1c\xc7q\x1c\xc7q\xff\x07$\xf4?\x00\x19\xfc\xff\xff\x03'\x05\x00\xff\x0e&\t\x03\xa4('\xa4(Bs(br(\xff\x03;\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x8a\x00\x03\xa4\x00\x00'\xa4\x00\x00BC^\x00b2/\x00"
        
        be_draft = b"\x00\x07WLAN Pi\x01\x08\x8c\x12\x98$\xb0H`l\x03\x01$\x05\x06\x05\x04\x00\x03\x00\x00-\x1a\xef\x19\x1b\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x18\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x02\x00\x00\x0f\xac\x02\x00\x0f\xac\x04\x8c\x006\x03E\xc2\x00=\x16$\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00F\x05\x02\x00\x00\x00\x00\x7f\x08\x00\x00\x08\x00\x00\x00\x00@\xbf\x0c2\x00\x80\x03\xaa\xff\x00\x00\xaa\xff\x00\x00\xc0\x05\x00$\x00\x00\x00\xdd\x121AY\x00\x00\x056.6.6\x01\x059.9.9\xdd\x18\x00P\xf2\x02\x01\x01\x8a\x00\x03\xa4\x00\x00'\xa4\x00\x00BC^\x00b2/\x00\xff##\r\x01\x00\x02@\x00\x04p\x0c\x89\x7f\x03\x80\x04\x00\x00\x00\xaa\xaa\xaa\xaa{\x1c\xc7q\x1c\xc7q\x1c\xc7q\x1c\xc7q\xff\x07$\xf4?\x00\x19\xfc\xff\xff\x03'\x05\x00\xff\x0e&\t\x03\xa4('\xa4(Bs(br(\xff\tj\x05\x11\x00\x00\x00\xfbO?\xff\x15l\x00\x00\xe2\xff\xdb\x00\x186\xd8\x1e\x00DDDDDDDDD"
        assert frame_bytes == be_draft
